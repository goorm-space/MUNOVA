plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.space'
version = '0.0.1-SNAPSHOT'
description = 'MUNOVA'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //spring data jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // JUnit
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // AWS SDK는 Base64 인코딩과 디코딩에 JAXB를 사용
    implementation 'javax.xml.bind:jaxb-api:2.3.1'


    // 테스트 코드에도 적용하려면 추가
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * querydsl 빌드 옵션
 */
///큐 객체 저장될 루트내용
def querydslDir = "${layout.projectDirectory}/build/generated/querydsl"

sourceSets{
    getByName("main").java.srcDirs(querydslDir)
}

/// 자바 컴파일 실행시 파일 어디에 넣을지
// Groovy DSL 문법으로 수정: tasks.withType<JavaCompile> -> tasks.withType(JavaCompile)
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

/// 클린 실행시 queryDsl 파일도 같이 삭제
tasks.named("clean"){
    doLast {
        file(querydslDir).deleteRecursively()
    }
}